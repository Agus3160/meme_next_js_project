// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id    String @id @default(uuid())
  username  String @unique
  email String @unique

  name String
  password String

  posts Post[]
  likes Like[]
  comments Comment[]
  templates Template[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Template {
  id    String @id @default(uuid())
  
  name  String
  desc  String
  imageId String @unique
  authorId String @unique

  post Post[]
  author User @relation(fields: [authorId], references: [id])
  image Image @relation(fields: [imageId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Image {
  id    String @id @default(uuid())

  urlOriginalImg String
  urlBlurImg String

  pathOriginalImg String @unique
  pathBlurImg String     @unique

  imageType String

  templates Template? 
  post Post?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post {
  id    String @id @default(uuid())

  title  String
  imageId String @unique
  templateId String 
  authorId String

  comments Comment[]
  likes Like[]

  template Template @relation(fields: [templateId], references: [id])
  image Image @relation(fields: [imageId], references: [id])
  author User @relation(fields: [authorId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Comment {
  id    String @id @default(uuid())

  content  String
  userId String @map("authorId")
  postId String

  user User @relation(fields: [userId], references: [id])
  post Post @relation(fields: [postId], references: [id])

  deleted DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Like {
  id    String @id @default(uuid())

  userId String @map("authorId")
  postId String

  user User @relation(fields: [userId], references: [id])
  post Post @relation(fields: [postId], references: [id])

  deleted DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, postId])
}